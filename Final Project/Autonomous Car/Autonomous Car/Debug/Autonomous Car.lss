
Autonomous Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000008a8  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028bb  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f4  00000000  00000000  0000341b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000106f  00000000  00000000  00003e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00004e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000575  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c78  00000000  00000000  000056b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00006329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  7a:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDirection>:
/* MCAL  */
#include "DIO_interface.h"

void DIO_SetPinDirection(u8 PortID , u8 PinID , u8 PinDirection)
{
	if((PortID <=3) && (PinID <=7) && ((PinDirection == DIO_PIN_OUTPUT) || (PinDirection == DIO_PIN_INPUT)))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_SetPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_SetPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_SetPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_SetPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_SetPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_SetPinDirection+0xea>
	{
		switch(PortID)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_SetPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_SetPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_SetPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_SetPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_SetPinDirection+0xba>
  a4:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_SetPinDirection+0x3e>
			{
				SET_BIT(DDRA,PinID);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,PinID);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_SetPinDirection+0x70>
			{
				SET_BIT(DDRB,PinID);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,PinID);
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SetPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SetPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_SetPinDirection+0xa2>
			{
				SET_BIT(DDRC,PinID);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SetPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,PinID);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_SetPinDirection+0xd4>
			{
				SET_BIT(DDRD,PinID);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,PinID);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_SetPinValue>:
	} 
	
}
void DIO_SetPinValue(u8 PortID , u8 PinID , u8 PinValue)
{
	if((PortID<=3) && (PinID <=7) && ((PinValue == DIO_PIN_LOW) || (PinValue == DIO_PIN_HIGH)))
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_SetPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_SetPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_SetPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_SetPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_SetPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_SetPinValue+0xea>
	{
		switch(PortID)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_SetPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_SetPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_SetPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_SetPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_SetPinValue+0xba>
 190:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_HIGH == PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_SetPinValue+0x3e>
			{
				SET_BIT(PORTA,PinID);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinID);
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_SetPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_SetPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PIN_HIGH == PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_SetPinValue+0x70>
			{
				SET_BIT(PORTB,PinID);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinID);
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PIN_HIGH == PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_SetPinValue+0xa2>
			{
				SET_BIT(PORTC,PinID);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinID);
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PIN_HIGH == PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_SetPinValue+0xd4>
			{
				SET_BIT(PORTD,PinID);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinID);
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <WriteHalfPort>:
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
}

static void WriteHalfPort(u8 value)
{
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
	if(1 == GET_BIT(value,0))
 25e:	80 ff       	sbrs	r24, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <WriteHalfPort+0x14>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <WriteHalfPort+0x1e>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	}
	
	if(1 == GET_BIT(value,1))
 278:	c1 ff       	sbrs	r28, 1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <WriteHalfPort+0x2e>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 286:	05 c0       	rjmp	.+10     	; 0x292 <WriteHalfPort+0x38>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	}
	
	if(1 == GET_BIT(value,2))
 292:	c2 ff       	sbrs	r28, 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <WriteHalfPort+0x48>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <WriteHalfPort+0x52>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	}
	
	if(1 == GET_BIT(value,3))
 2ac:	c3 ff       	sbrs	r28, 3
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <WriteHalfPort+0x62>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <WriteHalfPort+0x6c>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	}
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_SendCMD>:
	_delay_ms(2);
	LCD_SendCMD(0b00000110);
}

void LCD_SendCMD(u8 cmd)
{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);    //RS -> 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);    //RW -> 0
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	//get first 4 MSB
	WriteHalfPort(cmd>>4);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	82 95       	swap	r24
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	0e 94 2d 01 	call	0x25a	; 0x25a <WriteHalfPort>
	//enable high then low
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);   
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_SendCMD+0x30>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_SendCMD+0x36>
 300:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	//second 4 LSB
	WriteHalfPort(cmd);
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 2d 01 	call	0x25a	; 0x25a <WriteHalfPort>
	//enable high then low
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_SendCMD+0x56>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_SendCMD+0x5c>
 326:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_Init>:
 336:	2f e7       	ldi	r18, 0x7F	; 127
 338:	85 eb       	ldi	r24, 0xB5	; 181
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <LCD_Init+0x6>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_Init+0x10>
 346:	00 00       	nop
#include <util/delay.h>

void LCD_Init(void)
{
	_delay_ms(35);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);    //RS -> 0
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);    //RW -> 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	//get first 4 MSB
	WriteHalfPort(0b0010);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 2d 01 	call	0x25a	; 0x25a <WriteHalfPort>
	//enable high then low
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_Init+0x3a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_Init+0x40>
 376:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	LCD_SendCMD(0b00101000);
 382:	88 e2       	ldi	r24, 0x28	; 40
 384:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	95 ed       	ldi	r25, 0xD5	; 213
 38a:	9a 95       	dec	r25
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Init+0x54>
 38e:	00 00       	nop
	
	_delay_us(40);
	LCD_SendCMD(0b00001111);  //display on , cursor on , blink on
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 396:	25 ed       	ldi	r18, 0xD5	; 213
 398:	2a 95       	dec	r18
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_Init+0x62>
 39c:	00 00       	nop
	
	_delay_us(40);
	LCD_SendCMD(0b00000001);  //clear display
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9f e1       	ldi	r25, 0x1F	; 31
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_Init+0x72>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_Init+0x78>
 3ae:	00 00       	nop
	
	_delay_ms(2);
	LCD_SendCMD(0b00000110);
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 3b6:	08 95       	ret

000003b8 <LCD_SendChar>:
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
	}
}

void LCD_SendChar(u8 data)
{
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);    //RS -> 1
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);    //RW -> 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	//get first 4 MSB
	WriteHalfPort(data>>4);
 3d0:	8c 2f       	mov	r24, r28
 3d2:	82 95       	swap	r24
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	0e 94 2d 01 	call	0x25a	; 0x25a <WriteHalfPort>
	//enable high then low
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 3e4:	8f e9       	ldi	r24, 0x9F	; 159
 3e6:	9f e0       	ldi	r25, 0x0F	; 15
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_SendChar+0x30>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_SendChar+0x36>
 3ee:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	63 e0       	ldi	r22, 0x03	; 3
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	//second 4 LSB
	WriteHalfPort(data);
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 2d 01 	call	0x25a	; 0x25a <WriteHalfPort>
	//enable high then low
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 40a:	8f e9       	ldi	r24, 0x9F	; 159
 40c:	9f e0       	ldi	r25, 0x0F	; 15
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <LCD_SendString>:

void LCD_SendString(u8* string)
{
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
	if(string != NULL)
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	29 f4       	brne	.+10     	; 0x438 <LCD_SendString+0x14>
 42e:	0c c0       	rjmp	.+24     	; 0x448 <LCD_SendString+0x24>
	{
		u8 counter=0;
		while(string[counter] != NULL)
		{
			LCD_SendChar(string[counter]);
 430:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_SendChar>
			counter++;
 434:	cf 5f       	subi	r28, 0xFF	; 255
 436:	02 c0       	rjmp	.+4      	; 0x43c <LCD_SendString+0x18>
 438:	8c 01       	movw	r16, r24
 43a:	c0 e0       	ldi	r28, 0x00	; 0
void LCD_SendString(u8* string)
{
	if(string != NULL)
	{
		u8 counter=0;
		while(string[counter] != NULL)
 43c:	f8 01       	movw	r30, r16
 43e:	ec 0f       	add	r30, r28
 440:	f1 1d       	adc	r31, r1
 442:	80 81       	ld	r24, Z
 444:	81 11       	cpse	r24, r1
 446:	f4 cf       	rjmp	.-24     	; 0x430 <LCD_SendString+0xc>
		{
			LCD_SendChar(string[counter]);
			counter++;
		}
	}
}
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <LCD_PinsOUTPUT>:

void LCD_PinsOUTPUT(void)
{
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	65 e0       	ldi	r22, 0x05	; 5
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	66 e0       	ldi	r22, 0x06	; 6
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 496:	08 95       	ret

00000498 <main>:
#include "motor_interface.h"
#include "LCD_interface.h"


int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	1f 92       	push	r1
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	Motor_PinsOutput();
 4a2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <Motor_PinsOutput>
	LCD_PinsOUTPUT();
 4a6:	0e 94 28 02 	call	0x450	; 0x450 <LCD_PinsOUTPUT>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);   //BUZZER
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);		//LED
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	63 e0       	ldi	r22, 0x03	; 3
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	u8 distanceR=0;
	u8 distanceL=0;

#elif modes == uart
	//	Bluetooth module
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);		//Rx
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);		//Tx
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	UART_init();
 4d2:	0e 94 3c 04 	call	0x878	; 0x878 <UART_init>
#endif
	
	LCD_Init();
 4d6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Init>
		/************************************************************************/
				
				
	#elif modes == uart
		u8 recieved ;
		UART_RxByte(&recieved);
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	0e 94 4a 04 	call	0x894	; 0x894 <UART_RxByte>
		if(recieved=='F')
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	86 34       	cpi	r24, 0x46	; 70
 4e6:	81 f4       	brne	.+32     	; 0x508 <main+0x70>
		{
			LCD_SendCMD(0b00000001);  //clear display
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 4ee:	8f e3       	ldi	r24, 0x3F	; 63
 4f0:	9f e1       	ldi	r25, 0x1F	; 31
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0x5a>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x60>
 4f8:	00 00       	nop
			_delay_ms(2);
			
			UART_move_forward();
 4fa:	0e 94 98 03 	call	0x730	; 0x730 <UART_move_forward>
			LCD_SendString("Moving Forward");
 4fe:	80 e6       	ldi	r24, 0x60	; 96
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
 506:	e9 cf       	rjmp	.-46     	; 0x4da <main+0x42>
			
		}
		else if(recieved=='O')
 508:	8f 34       	cpi	r24, 0x4F	; 79
 50a:	81 f4       	brne	.+32     	; 0x52c <main+0x94>
		{
			LCD_SendCMD(0b00000001);  //clear display
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 512:	8f e3       	ldi	r24, 0x3F	; 63
 514:	9f e1       	ldi	r25, 0x1F	; 31
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <main+0x7e>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0x84>
 51c:	00 00       	nop
			_delay_ms(2);
			
			move_backward();
 51e:	0e 94 15 03 	call	0x62a	; 0x62a <move_backward>
			LCD_SendString("Turning Backward");
 522:	8f e6       	ldi	r24, 0x6F	; 111
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
 52a:	d7 cf       	rjmp	.-82     	; 0x4da <main+0x42>
		}
		else if(recieved=='R')
 52c:	82 35       	cpi	r24, 0x52	; 82
 52e:	81 f4       	brne	.+32     	; 0x550 <main+0xb8>
		{
			LCD_SendCMD(0b00000001);  //clear display
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 536:	8f e3       	ldi	r24, 0x3F	; 63
 538:	9f e1       	ldi	r25, 0x1F	; 31
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <main+0xa2>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0xa8>
 540:	00 00       	nop
			_delay_ms(2);
			
			UART_move_right();
 542:	0e 94 c1 03 	call	0x782	; 0x782 <UART_move_right>
			LCD_SendString("Turning Right");
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
 54e:	c5 cf       	rjmp	.-118    	; 0x4da <main+0x42>
		}
		else if(recieved=='L')
 550:	8c 34       	cpi	r24, 0x4C	; 76
 552:	81 f4       	brne	.+32     	; 0x574 <main+0xdc>
		{
			LCD_SendCMD(0b00000001);  //clear display	
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 55a:	8f e3       	ldi	r24, 0x3F	; 63
 55c:	9f e1       	ldi	r25, 0x1F	; 31
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <main+0xc6>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0xcc>
 564:	00 00       	nop
			_delay_ms(2);
			
			UART_move_left();
 566:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <UART_move_left>
			LCD_SendString("Turning Left");
 56a:	8e e8       	ldi	r24, 0x8E	; 142
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
 572:	b3 cf       	rjmp	.-154    	; 0x4da <main+0x42>
		}
		else if(recieved=='B')
 574:	82 34       	cpi	r24, 0x42	; 66
 576:	81 f4       	brne	.+32     	; 0x598 <main+0x100>
		{
			LCD_SendCMD(0b00000001);  //clear display
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 57e:	8f e3       	ldi	r24, 0x3F	; 63
 580:	9f e1       	ldi	r25, 0x1F	; 31
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0xea>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0xf0>
 588:	00 00       	nop
			_delay_ms(2);
			
			UART_move_GoBack();
 58a:	0e 94 13 04 	call	0x826	; 0x826 <UART_move_GoBack>
			LCD_SendString("Moving Backward");
 58e:	8b e9       	ldi	r24, 0x9B	; 155
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
 596:	a1 cf       	rjmp	.-190    	; 0x4da <main+0x42>
		}
		else if((recieved=='S') || (recieved == 'l') || (recieved == 'r') || (recieved =='f') || (recieved == 'b'))
 598:	83 35       	cpi	r24, 0x53	; 83
 59a:	41 f0       	breq	.+16     	; 0x5ac <main+0x114>
 59c:	8c 36       	cpi	r24, 0x6C	; 108
 59e:	31 f0       	breq	.+12     	; 0x5ac <main+0x114>
 5a0:	82 37       	cpi	r24, 0x72	; 114
 5a2:	21 f0       	breq	.+8      	; 0x5ac <main+0x114>
 5a4:	86 36       	cpi	r24, 0x66	; 102
 5a6:	11 f0       	breq	.+4      	; 0x5ac <main+0x114>
 5a8:	82 36       	cpi	r24, 0x62	; 98
 5aa:	19 f4       	brne	.+6      	; 0x5b2 <main+0x11a>
		{
			motor_stop();
 5ac:	0e 94 6f 03 	call	0x6de	; 0x6de <motor_stop>
 5b0:	94 cf       	rjmp	.-216    	; 0x4da <main+0x42>
		}	
		else{
			DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	63 e0       	ldi	r22, 0x03	; 3
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
			LCD_SendCMD(0b00000001);  //clear display
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_SendCMD>
 5c2:	8f e3       	ldi	r24, 0x3F	; 63
 5c4:	9f e1       	ldi	r25, 0x1F	; 31
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x12e>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x134>
 5cc:	00 00       	nop
			_delay_ms(2);
			
			LCD_SendString("Invalid direction");
 5ce:	8b ea       	ldi	r24, 0xAB	; 171
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 12 02 	call	0x424	; 0x424 <LCD_SendString>
		}
	#endif
	}
 5d6:	81 cf       	rjmp	.-254    	; 0x4da <main+0x42>

000005d8 <Motor_PinsOutput>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	66 e0       	ldi	r22, 0x06	; 6
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	65 e0       	ldi	r22, 0x05	; 5
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	64 e0       	ldi	r22, 0x04	; 4
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 5f6:	41 e0       	ldi	r20, 0x01	; 1
 5f8:	63 e0       	ldi	r22, 0x03	; 3
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	67 e0       	ldi	r22, 0x07	; 7
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	66 e0       	ldi	r22, 0x06	; 6
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	65 e0       	ldi	r22, 0x05	; 5
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 628:	08 95       	ret

0000062a <move_backward>:
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	66 e0       	ldi	r22, 0x06	; 6
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	65 e0       	ldi	r22, 0x05	; 5
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	64 e0       	ldi	r22, 0x04	; 4
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	63 e0       	ldi	r22, 0x03	; 3
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	67 e0       	ldi	r22, 0x07	; 7
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	66 e0       	ldi	r22, 0x06	; 6
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	65 e0       	ldi	r22, 0x05	; 5
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	64 e0       	ldi	r22, 0x04	; 4
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 67a:	2f ef       	ldi	r18, 0xFF	; 255
 67c:	84 e4       	ldi	r24, 0x44	; 68
 67e:	93 e3       	ldi	r25, 0x33	; 51
 680:	21 50       	subi	r18, 0x01	; 1
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <move_backward+0x56>
 688:	00 c0       	rjmp	.+0      	; 0x68a <move_backward+0x60>
 68a:	00 00       	nop
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	66 e0       	ldi	r22, 0x06	; 6
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	65 e0       	ldi	r22, 0x05	; 5
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	64 e0       	ldi	r22, 0x04	; 4
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	63 e0       	ldi	r22, 0x03	; 3
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	67 e0       	ldi	r22, 0x07	; 7
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	66 e0       	ldi	r22, 0x06	; 6
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	65 e0       	ldi	r22, 0x05	; 5
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	64 e0       	ldi	r22, 0x04	; 4
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 6dc:	08 95       	ret

000006de <motor_stop>:

}
void motor_stop(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	66 e0       	ldi	r22, 0x06	; 6
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	65 e0       	ldi	r22, 0x05	; 5
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	64 e0       	ldi	r22, 0x04	; 4
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	63 e0       	ldi	r22, 0x03	; 3
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	67 e0       	ldi	r22, 0x07	; 7
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	66 e0       	ldi	r22, 0x06	; 6
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	65 e0       	ldi	r22, 0x05	; 5
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	64 e0       	ldi	r22, 0x04	; 4
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 72e:	08 95       	ret

00000730 <UART_move_forward>:
/************************************************************************/
/*                        UART MOTION                                   */
/************************************************************************/
void UART_move_forward(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	66 e0       	ldi	r22, 0x06	; 6
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	65 e0       	ldi	r22, 0x05	; 5
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	64 e0       	ldi	r22, 0x04	; 4
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	63 e0       	ldi	r22, 0x03	; 3
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	67 e0       	ldi	r22, 0x07	; 7
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	66 e0       	ldi	r22, 0x06	; 6
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_HIGH);
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	65 e0       	ldi	r22, 0x05	; 5
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	64 e0       	ldi	r22, 0x04	; 4
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 780:	08 95       	ret

00000782 <UART_move_right>:
}
void UART_move_right(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	66 e0       	ldi	r22, 0x06	; 6
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	65 e0       	ldi	r22, 0x05	; 5
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	64 e0       	ldi	r22, 0x04	; 4
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	63 e0       	ldi	r22, 0x03	; 3
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	67 e0       	ldi	r22, 0x07	; 7
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	66 e0       	ldi	r22, 0x06	; 6
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_HIGH);
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	65 e0       	ldi	r22, 0x05	; 5
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 7c8:	40 e0       	ldi	r20, 0x00	; 0
 7ca:	64 e0       	ldi	r22, 0x04	; 4
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 7d2:	08 95       	ret

000007d4 <UART_move_left>:
}
void UART_move_left(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	66 e0       	ldi	r22, 0x06	; 6
 7d8:	82 e0       	ldi	r24, 0x02	; 2
 7da:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	65 e0       	ldi	r22, 0x05	; 5
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	64 e0       	ldi	r22, 0x04	; 4
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	63 e0       	ldi	r22, 0x03	; 3
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	67 e0       	ldi	r22, 0x07	; 7
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
 806:	40 e0       	ldi	r20, 0x00	; 0
 808:	66 e0       	ldi	r22, 0x06	; 6
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	65 e0       	ldi	r22, 0x05	; 5
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 81a:	41 e0       	ldi	r20, 0x01	; 1
 81c:	64 e0       	ldi	r22, 0x04	; 4
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 824:	08 95       	ret

00000826 <UART_move_GoBack>:
}
void UART_move_GoBack(void)
{
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	66 e0       	ldi	r22, 0x06	; 6
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	65 e0       	ldi	r22, 0x05	; 5
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	64 e0       	ldi	r22, 0x04	; 4
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	63 e0       	ldi	r22, 0x03	; 3
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	
	DIO_SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	67 e0       	ldi	r22, 0x07	; 7
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
 858:	41 e0       	ldi	r20, 0x01	; 1
 85a:	66 e0       	ldi	r22, 0x06	; 6
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	65 e0       	ldi	r22, 0x05	; 5
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	64 e0       	ldi	r22, 0x04	; 4
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPinValue>
 876:	08 95       	ret

00000878 <UART_init>:

void UART_TxByte(u8 data)
{
	UDR = data;
	while(0 == GET_BIT(UCSRA,5));
}
 878:	86 e8       	ldi	r24, 0x86	; 134
 87a:	80 bd       	out	0x20, r24	; 32
 87c:	8a b1       	in	r24, 0x0a	; 10
 87e:	8b 7f       	andi	r24, 0xFB	; 251
 880:	8a b9       	out	0x0a, r24	; 10
 882:	87 e6       	ldi	r24, 0x67	; 103
 884:	89 b9       	out	0x09, r24	; 9
 886:	8a b1       	in	r24, 0x0a	; 10
 888:	88 60       	ori	r24, 0x08	; 8
 88a:	8a b9       	out	0x0a, r24	; 10
 88c:	8a b1       	in	r24, 0x0a	; 10
 88e:	80 61       	ori	r24, 0x10	; 16
 890:	8a b9       	out	0x0a, r24	; 10
 892:	08 95       	ret

00000894 <UART_RxByte>:

void UART_RxByte(u8* returnedData)
{
	if(returnedData != NULL)
 894:	00 97       	sbiw	r24, 0x00	; 0
 896:	29 f0       	breq	.+10     	; 0x8a2 <UART_RxByte+0xe>
	{
		while(0 == GET_BIT(UCSRA,7));
 898:	5f 9b       	sbis	0x0b, 7	; 11
 89a:	fe cf       	rjmp	.-4      	; 0x898 <UART_RxByte+0x4>
		*returnedData = UDR;
 89c:	2c b1       	in	r18, 0x0c	; 12
 89e:	fc 01       	movw	r30, r24
 8a0:	20 83       	st	Z, r18
 8a2:	08 95       	ret

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
